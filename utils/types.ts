/**
 * TYPE DEFINITIONS - This provides TypeScript type definitions for the wine store application
 *
 * WHAT THIS FILE DOES:
 * - Defines TypeScript types for server actions and form handling
 * - Provides cart-related type definitions for shopping functionality
 * - Integrates with Prisma database types for type safety
 * - Ensures consistent data structures across the application
 * - Provides type checking for cart operations and database queries
 *
 * IMPORTANT FOR BEGINNERS:
 * - This file defines the "shape" of data throughout your application
 * - Types ensure data consistency and prevent runtime errors
 * - Cart types define how shopping cart data is structured
 * - Prisma integration provides database type safety
 * - Changes here affect type checking across the entire app
 *
 * TECHNOLOGIES USED:
 * - TypeScript (for type definitions and type safety)
 * - Prisma (for database type generation and integration)
 * - React (for form handling and server actions)
 * - FormData (for form submission and data handling)
 * - Type inference (for automatic type detection)
 */

// Import Prisma types for database integration
// This provides access to all database model types
import { Prisma } from "@prisma/client";

/**
 * ACTION FUNCTION TYPE
 *
 * This type defines the structure for server actions used in forms.
 * Server actions are functions that run on the server when forms are submitted.
 *
 * BEGINNER TIP: Think of this as a "form handler template" that defines
 * how your server-side form processing functions should look.
 *
 * Parameters:
 * - prevState: any - Previous state from the form (can be any type)
 * - formData: FormData - Form data submitted by the user
 *
 * Returns: Promise<{ message: string }> - Promise that resolves to a message
 * Usage: Used for type-checking server action functions
 *
 * Example:
 * export async function handleSubmit(prevState: any, formData: FormData) {
 *   // Process form data
 *   return { message: "Form submitted successfully!" };
 * }
 */
export type actionFunction = (
  prevState: any,
  formData: FormData
) => Promise<{ message: string }>;

/**
 * CART ITEM TYPE
 *
 * This type defines the structure for individual items in the shopping cart.
 * It represents what information is stored for each product in the cart.
 *
 * BEGINNER TIP: Think of this as a "cart item template" that defines
 * what information you need to display and manage each cart item.
 *
 * Properties:
 * - productId: string - Unique identifier for the product
 * - image: string - URL or path to the product image
 * - title: string - Product name/title for display
 * - price: string - Product price (formatted as string)
 * - amount: number - Quantity of this item in the cart
 * - company: string - Company/brand that makes the product
 *
 * Usage: Used for cart display, calculations, and cart management
 */
export type CartItem = {
  productId: string;
  image: string;
  title: string;
  price: string;
  amount: number;
  company: string;
};

/**
 * CART STATE TYPE
 *
 * This type defines the complete state of the shopping cart.
 * It includes all cart items and calculated totals for the entire cart.
 *
 * BEGINNER TIP: Think of this as a "cart summary template" that defines
 * everything you need to know about the current cart state.
 *
 * Properties:
 * - cartItems: CartItem[] - Array of all items in the cart
 * - numItemsInCart: number - Total number of items (sum of all amounts)
 * - cartTotal: number - Subtotal of all items before shipping/tax
 * - shipping: number - Shipping cost for the order
 * - tax: number - Tax amount calculated on the order
 * - orderTotal: number - Final total including shipping and tax
 *
 * Usage: Used for cart display, checkout calculations, and cart management
 */
export type CartState = {
  cartItems: CartItem[];
  numItemsInCart: number;
  cartTotal: number;
  shipping: number;
  tax: number;
  orderTotal: number;
};

/**
 * CART ITEM WITH WINE TYPE
 *
 * This type represents a cart item with full wine information from the database.
 * It uses Prisma's type system to ensure type safety when working with
 * database queries that include related wine data.
 *
 * BEGINNER TIP: Think of this as a "rich cart item template" that includes
 * all the detailed wine information, not just the basic cart data.
 *
 * Structure: Generated by Prisma based on database schema
 * Includes: Cart item data + full wine details + images + region information
 * Usage: Used for detailed cart displays and wine information presentation
 *
 * Prisma Integration:
 * - CartItemGetPayload - Gets the cart item type from Prisma
 * - include: { wine: { include: { images: true; region: true } } }
 *   - wine: Include the related wine record
 *   - images: Include all wine images
 *   - region: Include the wine's region information
 */
export type CartItemWithWine = Prisma.CartItemGetPayload<{
  include: { wine: { include: { images: true; region: true } } };
}>;
